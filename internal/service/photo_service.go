package service

import (
	"context"
	"encoding/json"
	"fmt"
	"go-worker/internal/entity"
	"go-worker/internal/helper"
	"go-worker/internal/params"
	"go-worker/internal/repository"
	"go-worker/pkg/rabbitmq"
	"log"
	"runtime"
	"sync"
	"time"

	"golang.org/x/time/rate"
)

type PhotoService interface {
	UploadPhoto(ctx context.Context, req *params.UploadPhotoRequest) error
	UploadSelfie(ctx context.Context, req *params.UploadSelfieRequest) error
	VerifyPhotoMatch(ctx context.Context, userID uint64) error
}

type PhotoServiceImpl struct {
	PhotoRepo          repository.PhotoRepository
	SelfieRepo         repository.SelfieRepository
	Publisher          *rabbitmq.Publisher
	embeddingLimiter   *rate.Limiter
	globalGoroutineSem chan struct{}
}

func NewPhotoService(photoRepository repository.PhotoRepository, SelfieRepository repository.SelfieRepository, publisher *rabbitmq.Publisher) PhotoService {
	return &PhotoServiceImpl{
		PhotoRepo:          photoRepository,
		SelfieRepo:         SelfieRepository,
		Publisher:          publisher,
		embeddingLimiter:   rate.NewLimiter(rate.Limit(10), 3),
		globalGoroutineSem: make(chan struct{}, 400),
	}
}

func (svc *PhotoServiceImpl) UploadSelfie(ctx context.Context, req *params.UploadSelfieRequest) error {
	selfie := entity.Selfie{
		UserID:    req.UserID,
		URL:       req.SelfieURL,
		CreatedAt: time.Now(),
	}

	jsonData := `[{"box": {"x_max": 1494, "x_min": 742, "y_max": 1078, "y_min": 80, "probability": 0.9993749260902404}, "embedding": [-0.177345871925354, -1.914473533630371, -1.1089708805084229, -0.7367612719535828, -0.2798457443714142, 0.046501170843839645, 1.920978546142578, -1.6129653453826904, 0.18334972858428955, -0.7695710062980652, -0.0009258390055038036, -1.493599534034729, -0.6554896831512451, -0.46814876794815063, 0.4960027933120727, 0.15478691458702087, 0.25786107778549194, -0.4596690833568573, 0.5805269479751587, -0.10914494842290878, -1.216877579689026, -0.6142804622650146, 0.11499065905809402, 1.5321860313415527, -0.7293119430541992, 0.9917284846305848, -1.263165831565857, 0.01346538495272398, -0.21068592369556427, -1.0298346281051636, 0.4445712566375733, -0.3457496464252472, -1.0014517307281494, -0.8678995966911316, -0.7002607583999634, -0.36467716097831726, 0.13903357088565826, 0.2414965033531189, -1.3407491445541382, -0.5570329427719116, -1.2197872400283811, 0.9867084622383118, -0.5131874084472656, 0.19457942247390747, -0.19872882962226868, 1.251270055770874, -0.3427067995071411, -0.12231224030256271, 0.20621037483215332, 0.6981894969940186, -0.3645176887512207, -0.9986894130706788, 1.492628574371338, 0.4535498023033142, 0.46388617157936096, -0.0908692106604576, 2.227238416671753, -1.4135069847106934, 0.013782940804958344, 0.46292537450790405, -0.8849005103111267, 0.7463322877883911, 0.9452325701713562, -0.29220184683799744, 0.13892194628715515, 0.04485452547669411, -0.09677237272262572, -1.5953837633132937, -1.157854676246643, -0.880860447883606, 0.6825129389762878, 0.22732944786548617, -1.066081166267395, -0.7310994863510132, -0.9686307907104492, 0.5738599896430969, -0.31215932965278625, -0.1012234389781952, 0.10782360285520554, -0.7439870834350586, -0.6056840419769287, -1.884791374206543, 1.311463475227356, -1.064311146736145, 2.2914066314697266, 0.2149035483598709, -1.069197416305542, -0.1226438283920288, -1.316370725631714, -0.15069203078746796, -0.5020464658737183, -1.3482540845870972, -1.259647011756897, 0.2131110578775406, -0.14470621943473816, 1.2310266494750977, 0.48786917328834534, -0.4121595025062561, 1.166892409324646, -0.4124263823032379, -1.6393259763717651, -0.3931725323200226, 0.12733067572116852, 0.054318737238645554, -0.7799733877182007, 0.6199358105659485, -0.48873811960220337, 0.3204529285430908, 1.502619981765747, -0.3723379373550415, -0.9460878968238832, -1.041522979736328, -0.96245014667511, 2.4515128135681152, -1.5380076169967651, -0.8756963014602661, -0.01343619916588068, -1.3316298723220823, -1.0134556293487549, 0.11232689023017885, -2.1646103858947754, -2.0014796257019043, -0.6042547225952148, 0.45125484466552734, 2.28914213180542, 1.299358367919922, 1.1096582412719729, -0.8119198083877563, 0.37105756998062134, -0.8794704675674438, -0.8974392414093018, 0.9285467267036438, 0.12459606677293776, -1.2199171781539917, 0.716672956943512, -1.2956585884094238, -1.1634820699691772, -1.63702392578125, 0.8309268951416016, 0.4976944029331207, 2.0774662494659424, -0.30838385224342346, 0.07012520730495453, -0.8200861811637878, 0.8161813616752625, 0.6384322047233582, 1.1885253190994265, -0.49947023391723633, 0.6994984745979309, -1.3199301958084106, 0.9159715175628662, -0.6203811168670654, 0.6377810835838318, 0.18618939816951752, -0.5166747570037842, 0.23489439487457275, 1.6045944690704346, -0.1436525732278824, 0.3467288017272949, 1.2259575128555298, 0.03178945183753967, -0.9829338788986206, -1.5736956596374512, -1.3764853477478027, 0.444443792104721, -0.00022390128287952393, 0.1495002657175064, 0.0002482062263879925, 0.2761032283306122, -1.9760602712631223, 1.6614536046981812, 0.2813788950443268, 0.5041530132293701, 1.3797552585601809, -0.0009901559678837657, 0.05794106423854828, 0.4605439007282257, -0.6142163872718811, -0.903354823589325, 2.2545602321624756, -0.9177305102348328, 0.24388420581817627, 1.1573643684387207, 0.43880894780159, -2.2603940963745117, -0.6344349980354309, -0.3832537531852722, 0.2344804406166077, -0.8518734574317932, -1.4658530950546265, -0.5836817026138306, -0.3757222890853882, 0.3984866440296173, 0.32915619015693665, 1.911297082901001, -1.2538365125656128, -1.6850545406341553, -0.19992662966251373, -0.8848987817764282, 0.03062683902680874, -0.114445760846138, 0.07648953795433044, 0.5207896828651428, 0.050827816128730774, -0.5464261174201965, -0.9735639095306396, 0.008009040728211403, -0.15199710428714752, -1.009283185005188, 0.00390371517278254, -0.4549552798271179, 1.3007208108901978, -1.4863747358322144, 2.6988189220428467, 0.7879503965377808, -0.4003559947013855, 0.3254965543746948, 0.30633246898651123, -1.9840224981307983, 1.0003660917282104, 0.03275434672832489, 1.5534723997116089, -0.669738233089447, 1.7397668361663818, -0.7002224922180176, 0.32123565673828125, 0.1957007646560669, -1.3831294775009155, 0.17022985219955444, 0.7698549628257751, -0.2938638925552368, -1.170021891593933, -0.41198766231536865, 0.5863808393478394, -2.202047109603882, 2.1711432933807373, 1.0950101613998413, -0.23263536393642423, 1.4156455993652344, 0.2530784010887146, -0.21063551306724548, -0.6236175894737244, 0.511275589466095, 0.8965930938720703, 0.36451393365859985, -0.5253360271453857, -1.2471356391906738, 0.19860614836215973, 0.6277947425842285, 0.16618835926055908, -1.136487603187561, -1.3466863632202148, -0.3618939816951752, 0.4113217890262604, 0.2555714249610901, -0.46387186646461487, -0.24257616698741913, 0.3656694889068603, 0.12000085413455965, 0.3647443950176239, 0.5043757557868958, -0.7272088527679443, -0.0279693640768528, -1.095819115638733, -1.099689245223999, 0.5129918456077576, -0.6302165389060974, -0.27258065342903137, 0.31960344314575195, -0.3833014667034149, -0.2709144949913025, -1.5989701747894287, 0.8173877000808716, 0.7338825464248657, 0.23731175065040588, 0.8198670148849487, -0.12781287729740143, -0.07105174660682678, 0.6540030241012573, -0.7886283993721008, -0.3471710681915283, -0.12158656865358353, 0.1755174696445465, -0.10788604617118835, 0.8194944858551025, -0.35404759645462036, -0.5447116494178772, 0.2525266706943512, -0.2525123655796051, -0.2819911241531372, 1.1689093112945557, 0.3274575173854828, 0.5686195492744446, 0.20813830196857452, 1.3590712547302246, -1.07107412815094, -1.1743483543395996, 0.3282134234905243, -1.485694169998169, 0.8910232782363892, -0.008444157429039478, 0.8676108121871948, 0.8510599136352539, -0.921466052532196, 2.30935001373291, -0.9174951910972596, -0.664467990398407, -1.2830125093460083, 0.004621036816388369, 0.22323182225227356, 0.9341197609901428, 3.2080671787261963, -0.0972396656870842, -1.932365655899048, -0.4560623168945313, 1.07818603515625, 1.477056860923767, 1.340185046195984, 0.12838146090507507, -0.4292817711830139, -0.3454711437225342, 0.2323409616947174, -0.42915064096450806, -1.5664973258972168, -0.3526632487773895, -0.2812349200248718, 1.3364695310592651, -0.9747578501701356, 2.7800512313842773, -0.5241888761520386, 0.07901117950677872, 0.02892206609249115, 1.4832909107208252, 0.16735057532787323, 0.12540806829929352, 0.6584266424179077, 0.12366488575935364, -0.913440763950348, -0.2145836055278778, 0.3806025981903076, 0.7869672775268555, -2.032620668411255, 0.2638590931892395, -0.5171835422515869, 1.4808944463729858, -0.0926019325852394, -0.615855872631073, -0.4282862842082978, -0.7837082147598267, 0.5293704867362976, 0.286101758480072, 0.8656502366065979, 0.03951633349061012, -0.7978850603103638, 0.07776439189910889, -0.9270496368408204, 0.9688669443130492, -0.6509108543395996, -0.6414976119995117, -0.9120953679084778, -0.2803167402744293, 1.301274657249451, -0.6521078944206238, 0.1816447228193283, -0.014835982583463192, -0.2800145745277405, 3.6745474338531494, -0.5491187572479248, -0.299125075340271, 1.7346107959747314, -1.2964743375778198, -0.8028073310852051, -0.4223122298717499, 2.1946372985839844, 1.6708428859710691, -0.22605133056640625, -0.06373510509729385, -1.3770006895065308, -0.011581242084503174, -0.8264907598495483, -0.5156298279762268, 1.132568597793579, 2.0502796173095703, -0.5207575559616089, -0.26607075333595276, -0.5076432228088379, -0.8445764183998108, -0.1902310252189636, 0.6342007517814636, 0.22432780265808103, 0.4923461079597473, -1.566104769706726, 2.0202486515045166, 2.0353899002075195, 0.038719747215509415, 1.3645644187927246, -0.3786521255970001, -1.0034148693084717, 0.7174121737480164, 0.2434970587491989, -0.6145797371864319, -0.4266584813594818, 1.2345373630523682, 2.007330894470215, 1.0139994621276855, 0.6117227673530579, -0.6936696171760559, -0.5526766777038574, 0.006348770577460527, 0.38080859184265137, 0.9648444056510924, -1.0818538665771484, -0.7205433249473572, 0.4178779721260071, 0.8079537749290466, 0.4207436144351959, -1.984345316886902, -0.499860405921936, 3.5953903198242188, 0.48798996210098267, 0.20058490335941315, -0.560901939868927, -0.7808107733726501, -0.7587435841560364, -0.8652068972587585, 0.3660723567008972, -0.26494985818862915, -1.1024177074432373, 0.6002762317657471, -0.9900120496749878, -0.33375945687294006, 0.18798066675662992, 0.1722436100244522, 0.9123198986053468, -1.3554593324661257, -1.280806303024292, -0.9175023436546326, -1.0467252731323242, 0.6548977494239807, -1.4631685018539429, -0.8914870023727417, -0.38430461287498474, -0.29425573348999023, -0.35685837268829346, -0.4801156222820282, -0.7486864328384399, -2.4688661098480225, -1.0444965362548828, 1.083194136619568, 0.6637157797813416, -2.6851980686187744, 0.5026146769523621, 0.07404214143753052, 0.5266575813293457, 0.014808516018092632, 0.6694965958595276, -1.0703847408294678, -0.7311484813690186, 0.29109978675842285, -0.6377102136611938, 0.4750116169452667, -1.1449401378631592, 0.3498707711696625, 0.32116883993148804, -1.5576462745666504, 0.014057394117116928, 0.5604233145713806, 0.7596015334129333, -0.3794074356555938, 0.08892226964235306, 0.7926320433616638, 0.5763165950775146, -1.378177046775818, 0.6019706130027771, 1.2746790647506714, 0.0020830894354730844, -0.07523831725120544, -0.13618965446949005, 0.34882038831710815, -0.349343478679657, -0.3623124659061432, -0.5200449228286743, 1.5678577423095703, 0.024786893278360367, 0.5408794283866882, -0.1284964382648468, -1.8619168996810913, -0.31695762276649475, 0.3221570551395416, -0.8919585347175598, -0.6369619965553284, 0.6649490594863892, -0.17058363556861875, -0.7314571738243103, -0.6824861764907837, -0.7276953458786011, -1.506833791732788, 0.1972985863685608, 0.4575335681438446, -0.7940186262130737, 0.2636664807796478, -0.5027899742126465, 0.4590282738208771, -0.6530988812446594, -0.8900483846664429, 0.2698058784008026, -0.030707119032740593, 1.3128217458724976, -0.9842262268066406, 0.8157601356506348, 0.29445013403892517, 0.06222588196396828]}]`

	selfie.EmbedData = []byte(jsonData)

	err := svc.SelfieRepo.Create(ctx, &selfie)
	if err != nil {
		return err
	}

	payload := map[string]interface{}{
		"user_id": req.UserID,
	}
	body, err := json.Marshal(payload)
	if err != nil {
		return fmt.Errorf("failed to marshal photo upload event: %w", err)
	}

	if err := svc.Publisher.Publish(ctx, body); err != nil {
		return fmt.Errorf("failed to publish message to RabbitMQ: %w", err)
	}

	return nil
}

func (svc *PhotoServiceImpl) UploadPhoto(ctx context.Context, req *params.UploadPhotoRequest) error {
	photo := entity.Photo{
		UserID:    req.UserID,
		URL:       req.PhotoURL,
		Status:    "pending",
		CreatedAt: time.Now(),
	}
	jsonData := `[{"box": {"x_max": 1494, "x_min": 742, "y_max": 1078, "y_min": 80, "probability": 0.9993749260902404}, "embedding": [-0.177345871925354, -1.914473533630371, -1.1089708805084229, -0.7367612719535828, -0.2798457443714142, 0.046501170843839645, 1.920978546142578, -1.6129653453826904, 0.18334972858428955, -0.7695710062980652, -0.0009258390055038036, -1.493599534034729, -0.6554896831512451, -0.46814876794815063, 0.4960027933120727, 0.15478691458702087, 0.25786107778549194, -0.4596690833568573, 0.5805269479751587, -0.10914494842290878, -1.216877579689026, -0.6142804622650146, 0.11499065905809402, 1.5321860313415527, -0.7293119430541992, 0.9917284846305848, -1.263165831565857, 0.01346538495272398, -0.21068592369556427, -1.0298346281051636, 0.4445712566375733, -0.3457496464252472, -1.0014517307281494, -0.8678995966911316, -0.7002607583999634, -0.36467716097831726, 0.13903357088565826, 0.2414965033531189, -1.3407491445541382, -0.5570329427719116, -1.2197872400283811, 0.9867084622383118, -0.5131874084472656, 0.19457942247390747, -0.19872882962226868, 1.251270055770874, -0.3427067995071411, -0.12231224030256271, 0.20621037483215332, 0.6981894969940186, -0.3645176887512207, -0.9986894130706788, 1.492628574371338, 0.4535498023033142, 0.46388617157936096, -0.0908692106604576, 2.227238416671753, -1.4135069847106934, 0.013782940804958344, 0.46292537450790405, -0.8849005103111267, 0.7463322877883911, 0.9452325701713562, -0.29220184683799744, 0.13892194628715515, 0.04485452547669411, -0.09677237272262572, -1.5953837633132937, -1.157854676246643, -0.880860447883606, 0.6825129389762878, 0.22732944786548617, -1.066081166267395, -0.7310994863510132, -0.9686307907104492, 0.5738599896430969, -0.31215932965278625, -0.1012234389781952, 0.10782360285520554, -0.7439870834350586, -0.6056840419769287, -1.884791374206543, 1.311463475227356, -1.064311146736145, 2.2914066314697266, 0.2149035483598709, -1.069197416305542, -0.1226438283920288, -1.316370725631714, -0.15069203078746796, -0.5020464658737183, -1.3482540845870972, -1.259647011756897, 0.2131110578775406, -0.14470621943473816, 1.2310266494750977, 0.48786917328834534, -0.4121595025062561, 1.166892409324646, -0.4124263823032379, -1.6393259763717651, -0.3931725323200226, 0.12733067572116852, 0.054318737238645554, -0.7799733877182007, 0.6199358105659485, -0.48873811960220337, 0.3204529285430908, 1.502619981765747, -0.3723379373550415, -0.9460878968238832, -1.041522979736328, -0.96245014667511, 2.4515128135681152, -1.5380076169967651, -0.8756963014602661, -0.01343619916588068, -1.3316298723220823, -1.0134556293487549, 0.11232689023017885, -2.1646103858947754, -2.0014796257019043, -0.6042547225952148, 0.45125484466552734, 2.28914213180542, 1.299358367919922, 1.1096582412719729, -0.8119198083877563, 0.37105756998062134, -0.8794704675674438, -0.8974392414093018, 0.9285467267036438, 0.12459606677293776, -1.2199171781539917, 0.716672956943512, -1.2956585884094238, -1.1634820699691772, -1.63702392578125, 0.8309268951416016, 0.4976944029331207, 2.0774662494659424, -0.30838385224342346, 0.07012520730495453, -0.8200861811637878, 0.8161813616752625, 0.6384322047233582, 1.1885253190994265, -0.49947023391723633, 0.6994984745979309, -1.3199301958084106, 0.9159715175628662, -0.6203811168670654, 0.6377810835838318, 0.18618939816951752, -0.5166747570037842, 0.23489439487457275, 1.6045944690704346, -0.1436525732278824, 0.3467288017272949, 1.2259575128555298, 0.03178945183753967, -0.9829338788986206, -1.5736956596374512, -1.3764853477478027, 0.444443792104721, -0.00022390128287952393, 0.1495002657175064, 0.0002482062263879925, 0.2761032283306122, -1.9760602712631223, 1.6614536046981812, 0.2813788950443268, 0.5041530132293701, 1.3797552585601809, -0.0009901559678837657, 0.05794106423854828, 0.4605439007282257, -0.6142163872718811, -0.903354823589325, 2.2545602321624756, -0.9177305102348328, 0.24388420581817627, 1.1573643684387207, 0.43880894780159, -2.2603940963745117, -0.6344349980354309, -0.3832537531852722, 0.2344804406166077, -0.8518734574317932, -1.4658530950546265, -0.5836817026138306, -0.3757222890853882, 0.3984866440296173, 0.32915619015693665, 1.911297082901001, -1.2538365125656128, -1.6850545406341553, -0.19992662966251373, -0.8848987817764282, 0.03062683902680874, -0.114445760846138, 0.07648953795433044, 0.5207896828651428, 0.050827816128730774, -0.5464261174201965, -0.9735639095306396, 0.008009040728211403, -0.15199710428714752, -1.009283185005188, 0.00390371517278254, -0.4549552798271179, 1.3007208108901978, -1.4863747358322144, 2.6988189220428467, 0.7879503965377808, -0.4003559947013855, 0.3254965543746948, 0.30633246898651123, -1.9840224981307983, 1.0003660917282104, 0.03275434672832489, 1.5534723997116089, -0.669738233089447, 1.7397668361663818, -0.7002224922180176, 0.32123565673828125, 0.1957007646560669, -1.3831294775009155, 0.17022985219955444, 0.7698549628257751, -0.2938638925552368, -1.170021891593933, -0.41198766231536865, 0.5863808393478394, -2.202047109603882, 2.1711432933807373, 1.0950101613998413, -0.23263536393642423, 1.4156455993652344, 0.2530784010887146, -0.21063551306724548, -0.6236175894737244, 0.511275589466095, 0.8965930938720703, 0.36451393365859985, -0.5253360271453857, -1.2471356391906738, 0.19860614836215973, 0.6277947425842285, 0.16618835926055908, -1.136487603187561, -1.3466863632202148, -0.3618939816951752, 0.4113217890262604, 0.2555714249610901, -0.46387186646461487, -0.24257616698741913, 0.3656694889068603, 0.12000085413455965, 0.3647443950176239, 0.5043757557868958, -0.7272088527679443, -0.0279693640768528, -1.095819115638733, -1.099689245223999, 0.5129918456077576, -0.6302165389060974, -0.27258065342903137, 0.31960344314575195, -0.3833014667034149, -0.2709144949913025, -1.5989701747894287, 0.8173877000808716, 0.7338825464248657, 0.23731175065040588, 0.8198670148849487, -0.12781287729740143, -0.07105174660682678, 0.6540030241012573, -0.7886283993721008, -0.3471710681915283, -0.12158656865358353, 0.1755174696445465, -0.10788604617118835, 0.8194944858551025, -0.35404759645462036, -0.5447116494178772, 0.2525266706943512, -0.2525123655796051, -0.2819911241531372, 1.1689093112945557, 0.3274575173854828, 0.5686195492744446, 0.20813830196857452, 1.3590712547302246, -1.07107412815094, -1.1743483543395996, 0.3282134234905243, -1.485694169998169, 0.8910232782363892, -0.008444157429039478, 0.8676108121871948, 0.8510599136352539, -0.921466052532196, 2.30935001373291, -0.9174951910972596, -0.664467990398407, -1.2830125093460083, 0.004621036816388369, 0.22323182225227356, 0.9341197609901428, 3.2080671787261963, -0.0972396656870842, -1.932365655899048, -0.4560623168945313, 1.07818603515625, 1.477056860923767, 1.340185046195984, 0.12838146090507507, -0.4292817711830139, -0.3454711437225342, 0.2323409616947174, -0.42915064096450806, -1.5664973258972168, -0.3526632487773895, -0.2812349200248718, 1.3364695310592651, -0.9747578501701356, 2.7800512313842773, -0.5241888761520386, 0.07901117950677872, 0.02892206609249115, 1.4832909107208252, 0.16735057532787323, 0.12540806829929352, 0.6584266424179077, 0.12366488575935364, -0.913440763950348, -0.2145836055278778, 0.3806025981903076, 0.7869672775268555, -2.032620668411255, 0.2638590931892395, -0.5171835422515869, 1.4808944463729858, -0.0926019325852394, -0.615855872631073, -0.4282862842082978, -0.7837082147598267, 0.5293704867362976, 0.286101758480072, 0.8656502366065979, 0.03951633349061012, -0.7978850603103638, 0.07776439189910889, -0.9270496368408204, 0.9688669443130492, -0.6509108543395996, -0.6414976119995117, -0.9120953679084778, -0.2803167402744293, 1.301274657249451, -0.6521078944206238, 0.1816447228193283, -0.014835982583463192, -0.2800145745277405, 3.6745474338531494, -0.5491187572479248, -0.299125075340271, 1.7346107959747314, -1.2964743375778198, -0.8028073310852051, -0.4223122298717499, 2.1946372985839844, 1.6708428859710691, -0.22605133056640625, -0.06373510509729385, -1.3770006895065308, -0.011581242084503174, -0.8264907598495483, -0.5156298279762268, 1.132568597793579, 2.0502796173095703, -0.5207575559616089, -0.26607075333595276, -0.5076432228088379, -0.8445764183998108, -0.1902310252189636, 0.6342007517814636, 0.22432780265808103, 0.4923461079597473, -1.566104769706726, 2.0202486515045166, 2.0353899002075195, 0.038719747215509415, 1.3645644187927246, -0.3786521255970001, -1.0034148693084717, 0.7174121737480164, 0.2434970587491989, -0.6145797371864319, -0.4266584813594818, 1.2345373630523682, 2.007330894470215, 1.0139994621276855, 0.6117227673530579, -0.6936696171760559, -0.5526766777038574, 0.006348770577460527, 0.38080859184265137, 0.9648444056510924, -1.0818538665771484, -0.7205433249473572, 0.4178779721260071, 0.8079537749290466, 0.4207436144351959, -1.984345316886902, -0.499860405921936, 3.5953903198242188, 0.48798996210098267, 0.20058490335941315, -0.560901939868927, -0.7808107733726501, -0.7587435841560364, -0.8652068972587585, 0.3660723567008972, -0.26494985818862915, -1.1024177074432373, 0.6002762317657471, -0.9900120496749878, -0.33375945687294006, 0.18798066675662992, 0.1722436100244522, 0.9123198986053468, -1.3554593324661257, -1.280806303024292, -0.9175023436546326, -1.0467252731323242, 0.6548977494239807, -1.4631685018539429, -0.8914870023727417, -0.38430461287498474, -0.29425573348999023, -0.35685837268829346, -0.4801156222820282, -0.7486864328384399, -2.4688661098480225, -1.0444965362548828, 1.083194136619568, 0.6637157797813416, -2.6851980686187744, 0.5026146769523621, 0.07404214143753052, 0.5266575813293457, 0.014808516018092632, 0.6694965958595276, -1.0703847408294678, -0.7311484813690186, 0.29109978675842285, -0.6377102136611938, 0.4750116169452667, -1.1449401378631592, 0.3498707711696625, 0.32116883993148804, -1.5576462745666504, 0.014057394117116928, 0.5604233145713806, 0.7596015334129333, -0.3794074356555938, 0.08892226964235306, 0.7926320433616638, 0.5763165950775146, -1.378177046775818, 0.6019706130027771, 1.2746790647506714, 0.0020830894354730844, -0.07523831725120544, -0.13618965446949005, 0.34882038831710815, -0.349343478679657, -0.3623124659061432, -0.5200449228286743, 1.5678577423095703, 0.024786893278360367, 0.5408794283866882, -0.1284964382648468, -1.8619168996810913, -0.31695762276649475, 0.3221570551395416, -0.8919585347175598, -0.6369619965553284, 0.6649490594863892, -0.17058363556861875, -0.7314571738243103, -0.6824861764907837, -0.7276953458786011, -1.506833791732788, 0.1972985863685608, 0.4575335681438446, -0.7940186262130737, 0.2636664807796478, -0.5027899742126465, 0.4590282738208771, -0.6530988812446594, -0.8900483846664429, 0.2698058784008026, -0.030707119032740593, 1.3128217458724976, -0.9842262268066406, 0.8157601356506348, 0.29445013403892517, 0.06222588196396828]}]`

	photo.EmbedData = []byte(jsonData)

	err := svc.PhotoRepo.Create(ctx, &photo)
	if err != nil {
		return err
	}

	return nil
}

func (svc *PhotoServiceImpl) VerifyPhotoMatch(ctx context.Context, userID uint64) error {
	start := time.Now()
	defer func() {
		log.Printf("Processed user %d in %v", userID, time.Since(start))
	}()
	var selfie entity.Selfie
	if err := svc.SelfieRepo.FindByUserID(ctx, &selfie, userID); err != nil {
		return fmt.Errorf("selfie photo not found: %w", err)
	}

	if selfie.EmbedData == nil {
		if err := svc.embeddingLimiter.Wait(ctx); err != nil {
			return fmt.Errorf("rate limiter blocked selfie embedding: %w", err)
		}
		embedCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
		defer cancel()
		embed, err := helper.GenerateEmbedding(embedCtx, selfie.URL)
		if err != nil {
			return fmt.Errorf("generate selfie embedding error: %w", err)
		}
		selfie.EmbedData = *embed
		if err := svc.SelfieRepo.Update(ctx, &selfie); err != nil {
			return fmt.Errorf("failed to update selfie embed: %w", err)
		}
	}

	var sources []entity.Embed
	if err := json.Unmarshal(selfie.EmbedData, &sources); err != nil {
		return fmt.Errorf("failed to unmarshal selfie embed: %w", err)
	}

	var photos []entity.Photo
	if err := svc.PhotoRepo.FindByAll(ctx, &photos, userID); err != nil {
		return err
	}

	if len(photos) == 0 {
		log.Printf("No photos found for user %d", userID)
		return nil
	}

	// limiter := rate.NewLimiter(rate.Limit(10), 3)
	sem := make(chan struct{}, 7)

	var wg sync.WaitGroup
	for _, photo := range photos {
		if err := ctx.Err(); err != nil {
			break
		}
		wg.Add(1)
		sem <- struct{}{}
		go func(p entity.Photo) {
			defer wg.Done()
			defer func() { <-sem }()
			log.Printf("Processing photo ID %d, active goroutines: %d", p.ID, runtime.NumGoroutine())

			if err := svc.embeddingLimiter.Wait(ctx); err != nil {
				log.Printf("Rate limiter blocked request for photo %d: %v", p.ID, err)
				return
			}

			if p.EmbedData == nil {
				embedCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
				defer cancel()
				embed, err := helper.GenerateEmbedding(embedCtx, p.URL)
				if err != nil {
					log.Printf("Generate embedding failed for photo %d: %v", p.ID, err)
					return
				}
				p.EmbedData = *embed
				if err := svc.PhotoRepo.Update(ctx, &p); err != nil {
					log.Printf("Failed to update embed for photo %d: %v", p.ID, err)
				}
			}

			var targets []entity.Embed
			if err := json.Unmarshal(p.EmbedData, &targets); err != nil {
				log.Printf("Unmarshal failed for photo %d: %v", p.ID, err)
				return
			}

			isMatch := false
			similarity := 0.0
			for _, s := range sources {
				if result := helper.Verify(ctx, s, targets, 0.9); result.IsSimiliar {
					isMatch = true
					similarity = result.Similiarity
					break
				}
			}
			log.Printf("📷 Photo %d verified in %v", photo.ID, time.Since(start))

			p.Status = "failed"
			p.Similiarity = similarity
			if isMatch {
				p.Status = "verified"
			}
			p.UpdatedAt = time.Now()
			if err := svc.PhotoRepo.Update(ctx, &p); err != nil {
				log.Printf("Failed to update status for photo %d: %v", p.ID, err)
			}
		}(photo)
	}
	wg.Wait()
	return nil
}

func (svc *PhotoServiceImpl) VerifyPhotoMatch2(ctx context.Context, userID uint64) error {
	start := time.Now()
	defer func() {
		log.Printf("Processed user %d in %v", userID, time.Since(start))
	}()

	var selfie entity.Selfie
	if err := svc.SelfieRepo.FindByUserID(ctx, &selfie, userID); err != nil {
		return fmt.Errorf("selfie photo not found: %w", err)
	}

	if selfie.EmbedData == nil {
		if err := svc.embeddingLimiter.Wait(ctx); err != nil {
			return fmt.Errorf("rate limiter blocked selfie embedding: %w", err)
		}
		embedCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
		defer cancel()

		embed, err := helper.GenerateEmbedding(embedCtx, selfie.URL)
		if err != nil {
			return fmt.Errorf("generate selfie embedding error: %w", err)
		}
		selfie.EmbedData = *embed

		if err := svc.SelfieRepo.Update(ctx, &selfie); err != nil {
			return fmt.Errorf("failed to update selfie embed: %w", err)
		}
	}

	var sources []entity.Embed
	if err := json.Unmarshal(selfie.EmbedData, &sources); err != nil {
		return fmt.Errorf("failed to unmarshal selfie embed: %w", err)
	}

	var photos []entity.Photo
	if err := svc.PhotoRepo.FindByAll(ctx, &photos, userID); err != nil {
		return err
	}

	if len(photos) == 0 {
		log.Printf("No photos found for user %d", userID)
		return nil
	}

	sem := make(chan struct{}, 7) // per-user goroutine limiter
	var wg sync.WaitGroup

	for _, photo := range photos {
		if err := ctx.Err(); err != nil {
			break
		}

		wg.Add(1)
		sem <- struct{}{}
		svc.globalGoroutineSem <- struct{}{} // 🔐 acquire global slot

		go func(p entity.Photo) {
			defer wg.Done()
			defer func() {
				<-sem
				<-svc.globalGoroutineSem // 🔓 release global slot
			}()

			log.Printf("Processing photo ID %d, active goroutines: %d", p.ID, runtime.NumGoroutine())

			if err := svc.embeddingLimiter.Wait(ctx); err != nil {
				log.Printf("Rate limiter blocked request for photo %d: %v", p.ID, err)
				return
			}

			if p.EmbedData == nil {
				embedCtx, cancel := context.WithTimeout(ctx, 30*time.Second)
				defer cancel()

				embed, err := helper.GenerateEmbedding(embedCtx, p.URL)
				if err != nil {
					log.Printf("Generate embedding failed for photo %d: %v", p.ID, err)
					return
				}
				p.EmbedData = *embed

				updateCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
				defer cancel()
				if err := svc.PhotoRepo.Update(updateCtx, &p); err != nil {
					log.Printf("Failed to update embed for photo %d: %v", p.ID, err)
				}
			}

			var targets []entity.Embed
			if err := json.Unmarshal(p.EmbedData, &targets); err != nil {
				log.Printf("Unmarshal failed for photo %d: %v", p.ID, err)
				return
			}

			isMatch := false
			similarity := 0.0
			for _, s := range sources {
				if result := helper.Verify(ctx, s, targets, 0.9); result.IsSimiliar {
					isMatch = true
					similarity = result.Similiarity
					break
				}
			}

			log.Printf("📷 Photo %d verified in %v", p.ID, time.Since(start))

			p.Status = "failed"
			p.Similiarity = similarity
			if isMatch {
				p.Status = "verified"
			}
			p.UpdatedAt = time.Now()

			updateCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
			defer cancel()
			if err := svc.PhotoRepo.Update(updateCtx, &p); err != nil {
				log.Printf("Failed to update status for photo %d: %v", p.ID, err)
			}
		}(photo)
	}

	wg.Wait()
	return nil
}
